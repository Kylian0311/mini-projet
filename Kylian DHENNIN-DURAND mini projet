#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_PARKINGS 100

typedef struct {
    char id[10];
    char nom[100];
    char adresse[100];
    int capacite;
    char etat[20];
    int disponibilite;
} Parking;

typedef struct {
    char plaque[20];
    time_t entree;
    time_t sortie;
    float montant;
} Client;

void lesparkings(const char *nomFichier, Parking *parkings, int *nb) {
    FILE *f = fopen(nomFichier, "r");
    if (!f) {
        printf("Erreur d'ouverture du fichier.\n");
        return;
    }

    char ligne[256];
    fgets(ligne, sizeof(ligne), f); // Ignorer l'en-tÃªte

    *nb = 0;
    while (fgets(ligne, sizeof(ligne), f) && *nb < MAX_PARKINGS) {
        sscanf(ligne, "%[^,],%[^,],%[^,],%d,%[^,],%d",
               parkings[*nb].id,
               parkings[*nb].nom,
               parkings[*nb].adresse,
               &parkings[*nb].capacite,
               parkings[*nb].etat,
               &parkings[*nb].disponibilite);
        (*nb)++;
    }

    fclose(f);
}

void afficheparking(Parking *parkings, int nb, const char *id) {
    for (int i = 0; i < nb; i++) {
        if (strcmp(parkings[i].id, id) == 0) {
            printf("\nParking ID: %s\nNom: %s\nAdresse: %s\nCapacite: %d\nEtat: %s\nDisponibilite: %d\n",
                   parkings[i].id, parkings[i].nom, parkings[i].adresse, parkings[i].capacite,
                   parkings[i].etat, parkings[i].disponibilite);
            return;
        }
    }
    printf("Parking non trouve.\n");
}

void afficheparkings(Parking *parkings, int nb) {
    for (int i = 0; i < nb; i++) {
        afficheparking(parkings, nb, parkings[i].id);
    }
}

void sortieParking(Parking *parkings, int nb, const char *id) {
    char plaque[20];
    int heures;
    float tarifHoraire = 2.0;

    printf("Entrez la plaque d'immatriculation : ");
    fgets(plaque, sizeof(plaque), stdin);
    plaque[strcspn(plaque, "\n")] = 0;

    printf("Entrez le nombre d'heures stationnees : ");
    scanf("%d", &heures);
    getchar(); // consommer le \n

    float montant = heures * tarifHoraire;
    printf("Montant a payer : %.2f euros\n", montant);

    FILE *f = fopen("clients.txt", "a");
    if (f) {
        time_t maintenant = time(NULL);
        fprintf(f, "%s,%s,%d heures,%.2f euros,%s", id, plaque, heures, montant, ctime(&maintenant));
        fclose(f);
    }

    for (int i = 0; i < nb; i++) {
        if (strcmp(parkings[i].id, id) == 0) {
            parkings[i].disponibilite++;
            break;
        }
    }
}

int verifierPlacesDisponibles(Parking *parkings, int nb, const char *id) {
    for (int i = 0; i < nb; i++) {
        if (strcmp(parkings[i].id, id) == 0) {
            return parkings[i].disponibilite == 0;
        }
    }
    return 0;
}

void sauvegarderEtatParking(const char *nomFichier, Parking *parkings, int nb) {
    FILE *f = fopen(nomFichier, "w");
    if (!f) return;

    fprintf(f, "id,nom,adresse,capacite,etat,disponibilite\n");
    for (int i = 0; i < nb; i++) {
        fprintf(f, "%s,%s,%s,%d,%s,%d\n",
                parkings[i].id,
                parkings[i].nom,
                parkings[i].adresse,
                parkings[i].capacite,
                parkings[i].etat,
                parkings[i].disponibilite);
    }
    fclose(f);
}

int main() {
    Parking parkings[MAX_PARKINGS];
    int nbParkings = 0;

    lesparkings("parking-metropole.csv", parkings, &nbParkings);

    int choix;
    char id[10];
    do {
        printf("\n=== MENU ===\n");
        printf("1. Afficher tous les parkings\n");
        printf("2. Afficher un parking\n");
        printf("3. Sortie d'un vehicule\n");
        printf("4. Verifier si un parking est plein\n");
        printf("5. Quitter\n");
        printf("Choix : ");
        scanf("%d", &choix);
        getchar();

        switch (choix) {
            case 1:
                afficheparkings(parkings, nbParkings);
                break;
            case 2:
                printf("Entrez l'ID du parking : ");
                fgets(id, sizeof(id), stdin);
                id[strcspn(id, "\n")] = 0;
                afficheparking(parkings, nbParkings, id);
                break;
            case 3:
                printf("Entrez l'ID du parking : ");
                fgets(id, sizeof(id), stdin);
                id[strcspn(id, "\n")] = 0;
                sortieParking(parkings, nbParkings, id);
                break;
            case 4:
                printf("Entrez l'ID du parking : ");
                fgets(id, sizeof(id), stdin);
                id[strcspn(id, "\n")] = 0;
                if (verifierPlacesDisponibles(parkings, nbParkings, id))
                    printf("Le parking est plein.\n");
                else
                    printf("Des places sont disponibles.\n");
                break;
            case 5:
                printf("Fermeture du programme.\n");
                sauvegarderEtatParking("parking-metropole.csv", parkings, nbParkings);
                break;
            default:
                printf("Choix invalide.\n");
        }
    } while (choix != 5);

    return 0;
}
